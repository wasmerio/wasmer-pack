/// Extra options for bindings generation
record bindings-options {
       name: option<string>
}

/// A package to generate bindings for.
resource package {
    /// Construct a new package from its components.
    ///
    /// This is a fairly low-level constructor. Users should prefer the
    /// appropriate "fromXXX()" constructor instead.
    static new: func(metadata: metadata, libraries: list<library>, commands: list<command>) -> package

    /// Load a package from a WEBC binary.
    static from-webc: func(bytes: list<u8>) -> expected<package, error>

    /// Generate a JavaScript project that can be used to access the provided
    /// package.
    generate-javascript: func(options: bindings-options) -> expected<list<file>, error>

    /// Generate a Python project that can be used to access the provided package.
    generate-python: func(options: bindings-options) -> expected<list<file>, error>
}

/// Metadata describing a package.
resource metadata {
    /// Create a new metadata object with all the required fields.
    ///
    /// The package name must be in the form `namespace/name`, where
    /// both the namespace and name can only contain ASCII numbers and letters,
    /// `-`, or `_`.
    static new: func(package-name: string, version: string) -> expected<metadata, error>

    /// A 1-sentence description of what the package does.
    set-description: func(description: string)
}

/// A WASI executable.
record command {
    /// The executable's name (must be a valid identifier).
    name: string,
    /// The WebAssembly bytecode for this executable.
    wasm: list<u8>,
}

/// The interface exposed by a library.
resource %interface {
    /// Load a library's interface from it's WIT definition.
    static from-wit: func(name: string, contents: string) -> expected<%interface, error>
    /// Load a library's interface from the definition on disk.
    static from-path: func(path: string) -> expected<%interface, error>
}

/// A library that we should generate bindings for.
record library {
    /// The interface exposed by this library.
    exports: %interface,
    /// Zero or more interfaces the host will provide to the guest.
    imports: list<%interface>,
    abi: abi,
    /// The WebAssembly bytecode for this library.
    wasm: list<u8>,
}

/// The ABI a library has been compiled against.
enum abi {
    /// No ABI.
    ///
    /// This corresponds Rust's `wasm32-unknown-unknown` target.
    none,
    /// The WebAssembly Systems Interface.
    ///
    /// This corresponds Rust's `wasm32-wasi` target.
    wasi,
}

/// An error that may occur.
record error {
    /// The error message.
    message: string,
    /// An extended error message, possibly including a backtrace and the list
    /// of errors which led to this one.
    verbose: string,
    /// The chain of source errors.
    causes: list<string>,
}

/// Information about a file.
record file {
    /// The file's path.
    filename: string,
    /// The file's contents.
    contents: list<u8>,
}
